# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'doublecommanderqaGhTK.ui'
##
## Created by: Qt User Interface Compiler version 5.15.2
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide2.QtCore import *
from PySide2.QtGui import *
from PySide2.QtWidgets import *


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1396, 629)
        MainWindow.setMinimumSize(QSize(640, 480))
        MainWindow.setBaseSize(QSize(800, 600))
        MainWindow.setDocumentMode(False)
        self.actionCreateSymbolicLink = QAction(MainWindow)
        self.actionCreateSymbolicLink.setObjectName(u"actionCreateSymbolicLink")
        self.actionCreateHardLink = QAction(MainWindow)
        self.actionCreateHardLink.setObjectName(u"actionCreateHardLink")
        self.actionCreateDirectory = QAction(MainWindow)
        self.actionCreateDirectory.setObjectName(u"actionCreateDirectory")
        self.actionCreateShortcut = QAction(MainWindow)
        self.actionCreateShortcut.setObjectName(u"actionCreateShortcut")
        self.actionChangeAttributes = QAction(MainWindow)
        self.actionChangeAttributes.setObjectName(u"actionChangeAttributes")
        self.actionShowFileProperties = QAction(MainWindow)
        self.actionShowFileProperties.setObjectName(u"actionShowFileProperties")
        self.actionEditComment = QAction(MainWindow)
        self.actionEditComment.setObjectName(u"actionEditComment")
        self.actionCalculateOccupiedSpace = QAction(MainWindow)
        self.actionCalculateOccupiedSpace.setObjectName(u"actionCalculateOccupiedSpace")
        self.actionCompareByContents = QAction(MainWindow)
        self.actionCompareByContents.setObjectName(u"actionCompareByContents")
        self.actionMultiRenameTool = QAction(MainWindow)
        self.actionMultiRenameTool.setObjectName(u"actionMultiRenameTool")
        self.actionPackFiles = QAction(MainWindow)
        self.actionPackFiles.setObjectName(u"actionPackFiles")
        self.actionExtractFiles = QAction(MainWindow)
        self.actionExtractFiles.setObjectName(u"actionExtractFiles")
        self.actionTestArchive = QAction(MainWindow)
        self.actionTestArchive.setObjectName(u"actionTestArchive")
        self.actionSplitFile = QAction(MainWindow)
        self.actionSplitFile.setObjectName(u"actionSplitFile")
        self.actionCombineFiles = QAction(MainWindow)
        self.actionCombineFiles.setObjectName(u"actionCombineFiles")
        self.actionCalculateChecksum = QAction(MainWindow)
        self.actionCalculateChecksum.setObjectName(u"actionCalculateChecksum")
        self.actionVerifyChecksum = QAction(MainWindow)
        self.actionVerifyChecksum.setObjectName(u"actionVerifyChecksum")
        self.actionWipe = QAction(MainWindow)
        self.actionWipe.setObjectName(u"actionWipe")
        self.actionDelete = QAction(MainWindow)
        self.actionDelete.setObjectName(u"actionDelete")
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName(u"actionExit")
        self.actionSelectGroup = QAction(MainWindow)
        self.actionSelectGroup.setObjectName(u"actionSelectGroup")
        self.actionUnselectGroup = QAction(MainWindow)
        self.actionUnselectGroup.setObjectName(u"actionUnselectGroup")
        self.actionSelectAll = QAction(MainWindow)
        self.actionSelectAll.setObjectName(u"actionSelectAll")
        self.actionUnselectAll = QAction(MainWindow)
        self.actionUnselectAll.setObjectName(u"actionUnselectAll")
        self.actionInvertSelection = QAction(MainWindow)
        self.actionInvertSelection.setObjectName(u"actionInvertSelection")
        self.actionSelectAllWithTheSameExtension = QAction(MainWindow)
        self.actionSelectAllWithTheSameExtension.setObjectName(u"actionSelectAllWithTheSameExtension")
        self.actionUnselectAllWithTheSameExtension = QAction(MainWindow)
        self.actionUnselectAllWithTheSameExtension.setObjectName(u"actionUnselectAllWithTheSameExtension")
        self.actionSaveSelection = QAction(MainWindow)
        self.actionSaveSelection.setObjectName(u"actionSaveSelection")
        self.actionRestoreSelection = QAction(MainWindow)
        self.actionRestoreSelection.setObjectName(u"actionRestoreSelection")
        self.actionSaveSelectionToFile = QAction(MainWindow)
        self.actionSaveSelectionToFile.setObjectName(u"actionSaveSelectionToFile")
        self.actionLoadSelectionFromFile = QAction(MainWindow)
        self.actionLoadSelectionFromFile.setObjectName(u"actionLoadSelectionFromFile")
        self.actionLoadSelectionFromClipboard = QAction(MainWindow)
        self.actionLoadSelectionFromClipboard.setObjectName(u"actionLoadSelectionFromClipboard")
        self.actionCopyFilenameToClipboard = QAction(MainWindow)
        self.actionCopyFilenameToClipboard.setObjectName(u"actionCopyFilenameToClipboard")
        self.actionCopyFilenameWithFullPath = QAction(MainWindow)
        self.actionCopyFilenameWithFullPath.setObjectName(u"actionCopyFilenameWithFullPath")
        self.actionCopyAllShownColumns = QAction(MainWindow)
        self.actionCopyAllShownColumns.setObjectName(u"actionCopyAllShownColumns")
        self.actionCompareDirectories = QAction(MainWindow)
        self.actionCompareDirectories.setObjectName(u"actionCompareDirectories")
        self.actionSearch = QAction(MainWindow)
        self.actionSearch.setObjectName(u"actionSearch")
        self.actionNewSearchInstance = QAction(MainWindow)
        self.actionNewSearchInstance.setObjectName(u"actionNewSearchInstance")
        self.actionViewCurrentSearchInstances = QAction(MainWindow)
        self.actionViewCurrentSearchInstances.setObjectName(u"actionViewCurrentSearchInstances")
        self.actionDirectoryHotlist = QAction(MainWindow)
        self.actionDirectoryHotlist.setObjectName(u"actionDirectoryHotlist")
        self.actionSynchronizeDirs = QAction(MainWindow)
        self.actionSynchronizeDirs.setObjectName(u"actionSynchronizeDirs")
        self.actionRunTerminal = QAction(MainWindow)
        self.actionRunTerminal.setObjectName(u"actionRunTerminal")
        self.actionExecuteInternalCommand = QAction(MainWindow)
        self.actionExecuteInternalCommand.setObjectName(u"actionExecuteInternalCommand")
        self.actionFlatView = QAction(MainWindow)
        self.actionFlatView.setObjectName(u"actionFlatView")
        self.actionOpenVFSList = QAction(MainWindow)
        self.actionOpenVFSList.setObjectName(u"actionOpenVFSList")
        self.actionSwapPanels = QAction(MainWindow)
        self.actionSwapPanels.setObjectName(u"actionSwapPanels")
        self.actionTargetSource = QAction(MainWindow)
        self.actionTargetSource.setObjectName(u"actionTargetSource")
        self.actionShowOccupiedSpace = QAction(MainWindow)
        self.actionShowOccupiedSpace.setObjectName(u"actionShowOccupiedSpace")
        self.actionNetworkConnect = QAction(MainWindow)
        self.actionNetworkConnect.setObjectName(u"actionNetworkConnect")
        self.actionNetworkDisconnect = QAction(MainWindow)
        self.actionNetworkDisconnect.setObjectName(u"actionNetworkDisconnect")
        self.actionMapNetworkDrive = QAction(MainWindow)
        self.actionMapNetworkDrive.setObjectName(u"actionMapNetworkDrive")
        self.actionDisconnectNetworkDrive = QAction(MainWindow)
        self.actionDisconnectNetworkDrive.setObjectName(u"actionDisconnectNetworkDrive")
        self.actionCopyNamesWithUNCPath = QAction(MainWindow)
        self.actionCopyNamesWithUNCPath.setObjectName(u"actionCopyNamesWithUNCPath")
        self.actionNewTab = QAction(MainWindow)
        self.actionNewTab.setObjectName(u"actionNewTab")
        self.actionRenameTab = QAction(MainWindow)
        self.actionRenameTab.setObjectName(u"actionRenameTab")
        self.actionOpenFolderInNewTab = QAction(MainWindow)
        self.actionOpenFolderInNewTab.setObjectName(u"actionOpenFolderInNewTab")
        self.actionCloseTab = QAction(MainWindow)
        self.actionCloseTab.setObjectName(u"actionCloseTab")
        self.actionCloseAllTabs = QAction(MainWindow)
        self.actionCloseAllTabs.setObjectName(u"actionCloseAllTabs")
        self.actionCloseDuplicateTabs = QAction(MainWindow)
        self.actionCloseDuplicateTabs.setObjectName(u"actionCloseDuplicateTabs")
        self.actionSwitchToNextTab = QAction(MainWindow)
        self.actionSwitchToNextTab.setObjectName(u"actionSwitchToNextTab")
        self.actionSwitchToPreviousTab = QAction(MainWindow)
        self.actionSwitchToPreviousTab.setObjectName(u"actionSwitchToPreviousTab")
        self.actionSaveTabsToFile = QAction(MainWindow)
        self.actionSaveTabsToFile.setObjectName(u"actionSaveTabsToFile")
        self.actionLoadTabsFromFile = QAction(MainWindow)
        self.actionLoadTabsFromFile.setObjectName(u"actionLoadTabsFromFile")
        self.actionSaveCurrentTabsToNewFavoriteTabs = QAction(MainWindow)
        self.actionSaveCurrentTabsToNewFavoriteTabs.setObjectName(u"actionSaveCurrentTabsToNewFavoriteTabs")
        self.actionLoadTabsFromFavoriteTabs = QAction(MainWindow)
        self.actionLoadTabsFromFavoriteTabs.setObjectName(u"actionLoadTabsFromFavoriteTabs")
        self.actionConfigurationOfFolderTabs = QAction(MainWindow)
        self.actionConfigurationOfFolderTabs.setObjectName(u"actionConfigurationOfFolderTabs")
        self.actionConfigurationOfFavoriteTabs = QAction(MainWindow)
        self.actionConfigurationOfFavoriteTabs.setObjectName(u"actionConfigurationOfFavoriteTabs")
        self.actionNormal = QAction(MainWindow)
        self.actionNormal.setObjectName(u"actionNormal")
        self.actionLocked = QAction(MainWindow)
        self.actionLocked.setObjectName(u"actionLocked")
        self.actionLockedWithDirectoryChangesAllowed = QAction(MainWindow)
        self.actionLockedWithDirectoryChangesAllowed.setObjectName(u"actionLockedWithDirectoryChangesAllowed")
        self.actionLockedWithDirectoriesOpenedInNewTabs = QAction(MainWindow)
        self.actionLockedWithDirectoriesOpenedInNewTabs.setObjectName(u"actionLockedWithDirectoriesOpenedInNewTabs")
        self.actionSetAllTabsToNormal = QAction(MainWindow)
        self.actionSetAllTabsToNormal.setObjectName(u"actionSetAllTabsToNormal")
        self.actionSetAllTabsToLocked = QAction(MainWindow)
        self.actionSetAllTabsToLocked.setObjectName(u"actionSetAllTabsToLocked")
        self.actionAllTabsLockedWithDirChangesAllowed = QAction(MainWindow)
        self.actionAllTabsLockedWithDirChangesAllowed.setObjectName(u"actionAllTabsLockedWithDirChangesAllowed")
        self.actionAllTabsLockedWithDirOpenedInNewTabs = QAction(MainWindow)
        self.actionAllTabsLockedWithDirOpenedInNewTabs.setObjectName(u"actionAllTabsLockedWithDirOpenedInNewTabs")
        self.actionSaveCurrentTabsToNewFavoriteTabs2 = QAction(MainWindow)
        self.actionSaveCurrentTabsToNewFavoriteTabs2.setObjectName(u"actionSaveCurrentTabsToNewFavoriteTabs2")
        self.actionResaveOnTheLastFavoriteTabsLoaded = QAction(MainWindow)
        self.actionResaveOnTheLastFavoriteTabsLoaded.setObjectName(u"actionResaveOnTheLastFavoriteTabsLoaded")
        self.actionRelopadTheLastFavoriteTabsLoaded = QAction(MainWindow)
        self.actionRelopadTheLastFavoriteTabsLoaded.setObjectName(u"actionRelopadTheLastFavoriteTabsLoaded")
        self.actionConfigurationOfFavoriteTabs2 = QAction(MainWindow)
        self.actionConfigurationOfFavoriteTabs2.setObjectName(u"actionConfigurationOfFavoriteTabs2")
        self.actionBriefView = QAction(MainWindow)
        self.actionBriefView.setObjectName(u"actionBriefView")
        self.actionFull = QAction(MainWindow)
        self.actionFull.setObjectName(u"actionFull")
        self.actionThumbnails = QAction(MainWindow)
        self.actionThumbnails.setObjectName(u"actionThumbnails")
        self.actionQuickViewPanel = QAction(MainWindow)
        self.actionQuickViewPanel.setObjectName(u"actionQuickViewPanel")
        self.actionTreeViewPanel = QAction(MainWindow)
        self.actionTreeViewPanel.setObjectName(u"actionTreeViewPanel")
        self.actionSortByName = QAction(MainWindow)
        self.actionSortByName.setObjectName(u"actionSortByName")
        self.actionSortByExtension = QAction(MainWindow)
        self.actionSortByExtension.setObjectName(u"actionSortByExtension")
        self.actionSortBySize = QAction(MainWindow)
        self.actionSortBySize.setObjectName(u"actionSortBySize")
        self.actionSortByDate = QAction(MainWindow)
        self.actionSortByDate.setObjectName(u"actionSortByDate")
        self.actionSortByAttributes = QAction(MainWindow)
        self.actionSortByAttributes.setObjectName(u"actionSortByAttributes")
        self.actionReverseOrder = QAction(MainWindow)
        self.actionReverseOrder.setObjectName(u"actionReverseOrder")
        self.actionRefresh = QAction(MainWindow)
        self.actionRefresh.setObjectName(u"actionRefresh")
        self.actionShowHiddenSystemFiles = QAction(MainWindow)
        self.actionShowHiddenSystemFiles.setObjectName(u"actionShowHiddenSystemFiles")
        self.actionHorizontalPanelsMode = QAction(MainWindow)
        self.actionHorizontalPanelsMode.setObjectName(u"actionHorizontalPanelsMode")
        self.actionOperationsViewer = QAction(MainWindow)
        self.actionOperationsViewer.setObjectName(u"actionOperationsViewer")
        self.actionSave_current_tabs_to_a_New_Favorite_Tabs_2 = QAction(MainWindow)
        self.actionSave_current_tabs_to_a_New_Favorite_Tabs_2.setObjectName(u"actionSave_current_tabs_to_a_New_Favorite_Tabs_2")
        self.actionResave_on_the_last_Favorite_Tabs_loaded_2 = QAction(MainWindow)
        self.actionResave_on_the_last_Favorite_Tabs_loaded_2.setObjectName(u"actionResave_on_the_last_Favorite_Tabs_loaded_2")
        self.actionReload_the_last_Favorite_Tabs_loaded = QAction(MainWindow)
        self.actionReload_the_last_Favorite_Tabs_loaded.setObjectName(u"actionReload_the_last_Favorite_Tabs_loaded")
        self.actionConfiguration_of_Favorite_Tabs_3 = QAction(MainWindow)
        self.actionConfiguration_of_Favorite_Tabs_3.setObjectName(u"actionConfiguration_of_Favorite_Tabs_3")
        self.actionOptions = QAction(MainWindow)
        self.actionOptions.setObjectName(u"actionOptions")
        self.actionConfigurationOfDirectoryHotlist = QAction(MainWindow)
        self.actionConfigurationOfDirectoryHotlist.setObjectName(u"actionConfigurationOfDirectoryHotlist")
        self.actionConfigurationOfFavoriteTabs4 = QAction(MainWindow)
        self.actionConfigurationOfFavoriteTabs4.setObjectName(u"actionConfigurationOfFavoriteTabs4")
        self.actionConfigurationOfFileAssociations = QAction(MainWindow)
        self.actionConfigurationOfFileAssociations.setObjectName(u"actionConfigurationOfFileAssociations")
        self.actionConfigurationOfFolderTabs2 = QAction(MainWindow)
        self.actionConfigurationOfFolderTabs2.setObjectName(u"actionConfigurationOfFolderTabs2")
        self.actionConfigurationOfArchivers = QAction(MainWindow)
        self.actionConfigurationOfArchivers.setObjectName(u"actionConfigurationOfArchivers")
        self.actionSavePosition = QAction(MainWindow)
        self.actionSavePosition.setObjectName(u"actionSavePosition")
        self.actionSaveSettings = QAction(MainWindow)
        self.actionSaveSettings.setObjectName(u"actionSaveSettings")
        self.actionKeyboard = QAction(MainWindow)
        self.actionKeyboard.setObjectName(u"actionKeyboard")
        self.actionVisitDoubleCommanderWebsite = QAction(MainWindow)
        self.actionVisitDoubleCommanderWebsite.setObjectName(u"actionVisitDoubleCommanderWebsite")
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        self.actionTBRefresh = QAction(MainWindow)
        self.actionTBRefresh.setObjectName(u"actionTBRefresh")
        icon = QIcon()
        icon.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_refresh.png", QSize(), QIcon.Normal, QIcon.Off)
        icon.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_refresh.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBRefresh.setIcon(icon)
        self.actionTBRunTerminal = QAction(MainWindow)
        self.actionTBRunTerminal.setObjectName(u"actionTBRunTerminal")
        icon1 = QIcon()
        icon1.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_runterm.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBRunTerminal.setIcon(icon1)
        self.actionTBOptions = QAction(MainWindow)
        self.actionTBOptions.setObjectName(u"actionTBOptions")
        icon2 = QIcon()
        icon2.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_options.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBOptions.setIcon(icon2)
        self.actionTBBriefView = QAction(MainWindow)
        self.actionTBBriefView.setObjectName(u"actionTBBriefView")
        self.actionTBBriefView.setCheckable(True)
        icon3 = QIcon()
        icon3.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_briefview.png", QSize(), QIcon.Normal, QIcon.Off)
        icon3.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_briefview.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBBriefView.setIcon(icon3)
        self.actionTBColumnsView = QAction(MainWindow)
        self.actionTBColumnsView.setObjectName(u"actionTBColumnsView")
        self.actionTBColumnsView.setCheckable(True)
        icon4 = QIcon()
        icon4.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_columnsview.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBColumnsView.setIcon(icon4)
        self.actionTBThumbnails = QAction(MainWindow)
        self.actionTBThumbnails.setObjectName(u"actionTBThumbnails")
        self.actionTBThumbnails.setCheckable(True)
        icon5 = QIcon()
        icon5.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_thumbnailsview.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBThumbnails.setIcon(icon5)
        self.actionTBFlatView = QAction(MainWindow)
        self.actionTBFlatView.setObjectName(u"actionTBFlatView")
        self.actionTBFlatView.setCheckable(True)
        icon6 = QIcon()
        icon6.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_flatview.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBFlatView.setIcon(icon6)
        self.actionTBGotoPreviousEntryInHistory = QAction(MainWindow)
        self.actionTBGotoPreviousEntryInHistory.setObjectName(u"actionTBGotoPreviousEntryInHistory")
        icon7 = QIcon()
        icon7.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_viewhistoryprev.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBGotoPreviousEntryInHistory.setIcon(icon7)
        self.actionTBGotoPreviousEntryInHistory2 = QAction(MainWindow)
        self.actionTBGotoPreviousEntryInHistory2.setObjectName(u"actionTBGotoPreviousEntryInHistory2")
        icon8 = QIcon()
        icon8.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_viewhistorynext.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBGotoPreviousEntryInHistory2.setIcon(icon8)
        self.actionTBSelectGroup = QAction(MainWindow)
        self.actionTBSelectGroup.setObjectName(u"actionTBSelectGroup")
        icon9 = QIcon()
        icon9.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_markplus.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBSelectGroup.setIcon(icon9)
        self.actionTBUnselectGroup = QAction(MainWindow)
        self.actionTBUnselectGroup.setObjectName(u"actionTBUnselectGroup")
        icon10 = QIcon()
        icon10.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_markminus.png", QSize(), QIcon.Normal, QIcon.Off)
        icon10.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_markplus.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBUnselectGroup.setIcon(icon10)
        self.actionTBInvertSelection = QAction(MainWindow)
        self.actionTBInvertSelection.setObjectName(u"actionTBInvertSelection")
        icon11 = QIcon()
        icon11.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_markinvert.png", QSize(), QIcon.Normal, QIcon.Off)
        icon11.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_markplus.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBInvertSelection.setIcon(icon11)
        self.actionTBPackFiles = QAction(MainWindow)
        self.actionTBPackFiles.setObjectName(u"actionTBPackFiles")
        icon12 = QIcon()
        icon12.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_packfiles.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBPackFiles.setIcon(icon12)
        self.actionTBExtractFiles = QAction(MainWindow)
        self.actionTBExtractFiles.setObjectName(u"actionTBExtractFiles")
        icon13 = QIcon()
        icon13.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_extractfiles.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBExtractFiles.setIcon(icon13)
        self.actionTBSearch = QAction(MainWindow)
        self.actionTBSearch.setObjectName(u"actionTBSearch")
        icon14 = QIcon()
        icon14.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_search.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBSearch.setIcon(icon14)
        self.actionTBMultiRenameTool = QAction(MainWindow)
        self.actionTBMultiRenameTool.setObjectName(u"actionTBMultiRenameTool")
        icon15 = QIcon()
        icon15.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_multirename.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBMultiRenameTool.setIcon(icon15)
        self.actionTBSynchronizeDirs = QAction(MainWindow)
        self.actionTBSynchronizeDirs.setObjectName(u"actionTBSynchronizeDirs")
        icon16 = QIcon()
        icon16.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_syncdirs.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBSynchronizeDirs.setIcon(icon16)
        self.actionTBCopyFilenameWithFullPath = QAction(MainWindow)
        self.actionTBCopyFilenameWithFullPath.setObjectName(u"actionTBCopyFilenameWithFullPath")
        icon17 = QIcon()
        icon17.addFile(u"../pyCommander/pixmaps/dctheme/16x16/actions/cm_copyfullnamestoclip.png", QSize(), QIcon.Normal, QIcon.On)
        self.actionTBCopyFilenameWithFullPath.setIcon(icon17)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.centralwidget.setEnabled(True)
        self.centralwidget.setMouseTracking(True)
        self.gridLayout = QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setSizeConstraint(QLayout.SetMaximumSize)
        self.horizontalLayoutLeftButtonBar = QHBoxLayout()
        self.horizontalLayoutLeftButtonBar.setSpacing(7)
        self.horizontalLayoutLeftButtonBar.setObjectName(u"horizontalLayoutLeftButtonBar")
        self.horizontalLayoutLeftButtonBar.setSizeConstraint(QLayout.SetFixedSize)
        self.horizontalLayoutLeftButtonBar.setContentsMargins(-1, -1, -1, 0)
        self.pushButtonLeftDrive1 = QPushButton(self.centralwidget)
        self.pushButtonLeftDrive1.setObjectName(u"pushButtonLeftDrive1")
        sizePolicy = QSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.pushButtonLeftDrive1.sizePolicy().hasHeightForWidth())
        self.pushButtonLeftDrive1.setSizePolicy(sizePolicy)
        self.pushButtonLeftDrive1.setMinimumSize(QSize(48, 32))
        self.pushButtonLeftDrive1.setMaximumSize(QSize(48, 32))
        self.pushButtonLeftDrive1.setBaseSize(QSize(48, 32))
        icon18 = QIcon()
        icon18.addFile(u"../pyCommander/pixmaps/dctheme/16x16/devices/drive-harddisk.png", QSize(), QIcon.Normal, QIcon.Off)
        self.pushButtonLeftDrive1.setIcon(icon18)
        self.pushButtonLeftDrive1.setIconSize(QSize(16, 16))
        self.pushButtonLeftDrive1.setFlat(True)

        self.horizontalLayoutLeftButtonBar.addWidget(self.pushButtonLeftDrive1)

        self.pushButtonLeftVFS = QPushButton(self.centralwidget)
        self.pushButtonLeftVFS.setObjectName(u"pushButtonLeftVFS")
        sizePolicy.setHeightForWidth(self.pushButtonLeftVFS.sizePolicy().hasHeightForWidth())
        self.pushButtonLeftVFS.setSizePolicy(sizePolicy)
        self.pushButtonLeftVFS.setMinimumSize(QSize(48, 32))
        self.pushButtonLeftVFS.setMaximumSize(QSize(48, 32))
        self.pushButtonLeftVFS.setBaseSize(QSize(48, 32))
        icon19 = QIcon()
        icon19.addFile(u"../pyCommander/pixmaps/dctheme/16x16/devices/drive-virtual.png", QSize(), QIcon.Normal, QIcon.Off)
        self.pushButtonLeftVFS.setIcon(icon19)
        self.pushButtonLeftVFS.setIconSize(QSize(16, 16))
        self.pushButtonLeftVFS.setFlat(True)

        self.horizontalLayoutLeftButtonBar.addWidget(self.pushButtonLeftVFS)

        self.horizontalSpacerLeftButtonBar = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayoutLeftButtonBar.addItem(self.horizontalSpacerLeftButtonBar)


        self.gridLayout.addLayout(self.horizontalLayoutLeftButtonBar, 0, 0, 1, 1)

        self.horizontalLayoutRightButtonBar = QHBoxLayout()
        self.horizontalLayoutRightButtonBar.setObjectName(u"horizontalLayoutRightButtonBar")
        self.horizontalLayoutRightButtonBar.setSizeConstraint(QLayout.SetFixedSize)
        self.pushButtonRightDrive1 = QPushButton(self.centralwidget)
        self.pushButtonRightDrive1.setObjectName(u"pushButtonRightDrive1")
        sizePolicy.setHeightForWidth(self.pushButtonRightDrive1.sizePolicy().hasHeightForWidth())
        self.pushButtonRightDrive1.setSizePolicy(sizePolicy)
        self.pushButtonRightDrive1.setMinimumSize(QSize(48, 32))
        self.pushButtonRightDrive1.setMaximumSize(QSize(48, 32))
        self.pushButtonRightDrive1.setBaseSize(QSize(48, 32))
        self.pushButtonRightDrive1.setIcon(icon18)
        self.pushButtonRightDrive1.setIconSize(QSize(16, 16))
        self.pushButtonRightDrive1.setFlat(True)

        self.horizontalLayoutRightButtonBar.addWidget(self.pushButtonRightDrive1)

        self.pushButtonRightVFS = QPushButton(self.centralwidget)
        self.pushButtonRightVFS.setObjectName(u"pushButtonRightVFS")
        sizePolicy.setHeightForWidth(self.pushButtonRightVFS.sizePolicy().hasHeightForWidth())
        self.pushButtonRightVFS.setSizePolicy(sizePolicy)
        self.pushButtonRightVFS.setMinimumSize(QSize(48, 0))
        self.pushButtonRightVFS.setMaximumSize(QSize(48, 32))
        self.pushButtonRightVFS.setBaseSize(QSize(48, 32))
        self.pushButtonRightVFS.setIcon(icon19)
        self.pushButtonRightVFS.setIconSize(QSize(16, 16))
        self.pushButtonRightVFS.setFlat(True)

        self.horizontalLayoutRightButtonBar.addWidget(self.pushButtonRightVFS)

        self.horizontalSpacerRightButtonBar = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayoutRightButtonBar.addItem(self.horizontalSpacerRightButtonBar)


        self.gridLayout.addLayout(self.horizontalLayoutRightButtonBar, 0, 1, 1, 1)

        self.line = QFrame(self.centralwidget)
        self.line.setObjectName(u"line")
        self.line.setFrameShape(QFrame.HLine)
        self.line.setFrameShadow(QFrame.Sunken)

        self.gridLayout.addWidget(self.line, 1, 0, 1, 2)

        self.horizontalLayoutLeftDrivesList = QHBoxLayout()
        self.horizontalLayoutLeftDrivesList.setSpacing(7)
        self.horizontalLayoutLeftDrivesList.setObjectName(u"horizontalLayoutLeftDrivesList")
        self.horizontalLayoutLeftDrivesList.setSizeConstraint(QLayout.SetFixedSize)
        self.horizontalLayoutLeftDrivesList.setContentsMargins(-1, -1, -1, 0)
        self.comboBoxLeftDrives = QComboBox(self.centralwidget)
        self.comboBoxLeftDrives.addItem(icon18, "")
        self.comboBoxLeftDrives.addItem(icon19, "")
        self.comboBoxLeftDrives.setObjectName(u"comboBoxLeftDrives")

        self.horizontalLayoutLeftDrivesList.addWidget(self.comboBoxLeftDrives)

        self.horizontalSpacerLeftDrivesLeft = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayoutLeftDrivesList.addItem(self.horizontalSpacerLeftDrivesLeft)

        self.labelLeftDiskVolumeSize = QLabel(self.centralwidget)
        self.labelLeftDiskVolumeSize.setObjectName(u"labelLeftDiskVolumeSize")

        self.horizontalLayoutLeftDrivesList.addWidget(self.labelLeftDiskVolumeSize)

        self.horizontalSpacerLeftDrivesRight = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayoutLeftDrivesList.addItem(self.horizontalSpacerLeftDrivesRight)

        self.pushButtonLeftDirectoryHotlist = QPushButton(self.centralwidget)
        self.pushButtonLeftDirectoryHotlist.setObjectName(u"pushButtonLeftDirectoryHotlist")
        sizePolicy.setHeightForWidth(self.pushButtonLeftDirectoryHotlist.sizePolicy().hasHeightForWidth())
        self.pushButtonLeftDirectoryHotlist.setSizePolicy(sizePolicy)
        self.pushButtonLeftDirectoryHotlist.setMinimumSize(QSize(32, 32))
        self.pushButtonLeftDirectoryHotlist.setMaximumSize(QSize(32, 32))
        self.pushButtonLeftDirectoryHotlist.setBaseSize(QSize(32, 32))
        self.pushButtonLeftDirectoryHotlist.setFlat(True)

        self.horizontalLayoutLeftDrivesList.addWidget(self.pushButtonLeftDirectoryHotlist)

        self.pushButtonLeftGotoRootDirectory = QPushButton(self.centralwidget)
        self.pushButtonLeftGotoRootDirectory.setObjectName(u"pushButtonLeftGotoRootDirectory")
        sizePolicy.setHeightForWidth(self.pushButtonLeftGotoRootDirectory.sizePolicy().hasHeightForWidth())
        self.pushButtonLeftGotoRootDirectory.setSizePolicy(sizePolicy)
        self.pushButtonLeftGotoRootDirectory.setMinimumSize(QSize(32, 32))
        self.pushButtonLeftGotoRootDirectory.setMaximumSize(QSize(32, 32))
        self.pushButtonLeftGotoRootDirectory.setBaseSize(QSize(32, 32))
        self.pushButtonLeftGotoRootDirectory.setFlat(True)

        self.horizontalLayoutLeftDrivesList.addWidget(self.pushButtonLeftGotoRootDirectory)

        self.pushButtonLeftGotoParentDirectory = QPushButton(self.centralwidget)
        self.pushButtonLeftGotoParentDirectory.setObjectName(u"pushButtonLeftGotoParentDirectory")
        sizePolicy.setHeightForWidth(self.pushButtonLeftGotoParentDirectory.sizePolicy().hasHeightForWidth())
        self.pushButtonLeftGotoParentDirectory.setSizePolicy(sizePolicy)
        self.pushButtonLeftGotoParentDirectory.setMinimumSize(QSize(32, 32))
        self.pushButtonLeftGotoParentDirectory.setMaximumSize(QSize(32, 32))
        self.pushButtonLeftGotoParentDirectory.setBaseSize(QSize(32, 32))
        self.pushButtonLeftGotoParentDirectory.setFlat(True)

        self.horizontalLayoutLeftDrivesList.addWidget(self.pushButtonLeftGotoParentDirectory)

        self.pushButtonLeftGotoHomeDirectory = QPushButton(self.centralwidget)
        self.pushButtonLeftGotoHomeDirectory.setObjectName(u"pushButtonLeftGotoHomeDirectory")
        sizePolicy.setHeightForWidth(self.pushButtonLeftGotoHomeDirectory.sizePolicy().hasHeightForWidth())
        self.pushButtonLeftGotoHomeDirectory.setSizePolicy(sizePolicy)
        self.pushButtonLeftGotoHomeDirectory.setMinimumSize(QSize(32, 32))
        self.pushButtonLeftGotoHomeDirectory.setMaximumSize(QSize(32, 32))
        self.pushButtonLeftGotoHomeDirectory.setBaseSize(QSize(32, 32))
        self.pushButtonLeftGotoHomeDirectory.setFlat(True)

        self.horizontalLayoutLeftDrivesList.addWidget(self.pushButtonLeftGotoHomeDirectory)

        self.pushButtonLeftRightLeftPanel = QPushButton(self.centralwidget)
        self.pushButtonLeftRightLeftPanel.setObjectName(u"pushButtonLeftRightLeftPanel")
        sizePolicy.setHeightForWidth(self.pushButtonLeftRightLeftPanel.sizePolicy().hasHeightForWidth())
        self.pushButtonLeftRightLeftPanel.setSizePolicy(sizePolicy)
        self.pushButtonLeftRightLeftPanel.setMinimumSize(QSize(32, 32))
        self.pushButtonLeftRightLeftPanel.setMaximumSize(QSize(32, 32))
        self.pushButtonLeftRightLeftPanel.setBaseSize(QSize(32, 32))
        self.pushButtonLeftRightLeftPanel.setFlat(True)

        self.horizontalLayoutLeftDrivesList.addWidget(self.pushButtonLeftRightLeftPanel)


        self.gridLayout.addLayout(self.horizontalLayoutLeftDrivesList, 2, 0, 1, 1)

        self.horizontalLayoutRightDrivesList = QHBoxLayout()
        self.horizontalLayoutRightDrivesList.setObjectName(u"horizontalLayoutRightDrivesList")
        self.horizontalLayoutRightDrivesList.setSizeConstraint(QLayout.SetFixedSize)
        self.comboBoxRightDrives = QComboBox(self.centralwidget)
        self.comboBoxRightDrives.addItem(icon18, "")
        self.comboBoxRightDrives.addItem(icon19, "")
        self.comboBoxRightDrives.setObjectName(u"comboBoxRightDrives")

        self.horizontalLayoutRightDrivesList.addWidget(self.comboBoxRightDrives)

        self.horizontalSpacerRightDrivesLeft = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayoutRightDrivesList.addItem(self.horizontalSpacerRightDrivesLeft)

        self.labelRightDiskVolumeSize = QLabel(self.centralwidget)
        self.labelRightDiskVolumeSize.setObjectName(u"labelRightDiskVolumeSize")

        self.horizontalLayoutRightDrivesList.addWidget(self.labelRightDiskVolumeSize)

        self.horizontalSpacerRightDrivesRight = QSpacerItem(40, 20, QSizePolicy.Expanding, QSizePolicy.Minimum)

        self.horizontalLayoutRightDrivesList.addItem(self.horizontalSpacerRightDrivesRight)

        self.pushButtonRightDirectoryHotlist = QPushButton(self.centralwidget)
        self.pushButtonRightDirectoryHotlist.setObjectName(u"pushButtonRightDirectoryHotlist")
        sizePolicy.setHeightForWidth(self.pushButtonRightDirectoryHotlist.sizePolicy().hasHeightForWidth())
        self.pushButtonRightDirectoryHotlist.setSizePolicy(sizePolicy)
        self.pushButtonRightDirectoryHotlist.setMinimumSize(QSize(2, 2))
        self.pushButtonRightDirectoryHotlist.setMaximumSize(QSize(32, 32))
        self.pushButtonRightDirectoryHotlist.setBaseSize(QSize(32, 32))
        self.pushButtonRightDirectoryHotlist.setFlat(True)

        self.horizontalLayoutRightDrivesList.addWidget(self.pushButtonRightDirectoryHotlist)

        self.pushButtonRightGotoRootDirectory = QPushButton(self.centralwidget)
        self.pushButtonRightGotoRootDirectory.setObjectName(u"pushButtonRightGotoRootDirectory")
        sizePolicy.setHeightForWidth(self.pushButtonRightGotoRootDirectory.sizePolicy().hasHeightForWidth())
        self.pushButtonRightGotoRootDirectory.setSizePolicy(sizePolicy)
        self.pushButtonRightGotoRootDirectory.setMinimumSize(QSize(32, 32))
        self.pushButtonRightGotoRootDirectory.setMaximumSize(QSize(32, 32))
        self.pushButtonRightGotoRootDirectory.setBaseSize(QSize(32, 32))
        self.pushButtonRightGotoRootDirectory.setFlat(True)

        self.horizontalLayoutRightDrivesList.addWidget(self.pushButtonRightGotoRootDirectory)

        self.pushButtonRightGotoParentDirectory = QPushButton(self.centralwidget)
        self.pushButtonRightGotoParentDirectory.setObjectName(u"pushButtonRightGotoParentDirectory")
        sizePolicy.setHeightForWidth(self.pushButtonRightGotoParentDirectory.sizePolicy().hasHeightForWidth())
        self.pushButtonRightGotoParentDirectory.setSizePolicy(sizePolicy)
        self.pushButtonRightGotoParentDirectory.setMinimumSize(QSize(32, 32))
        self.pushButtonRightGotoParentDirectory.setMaximumSize(QSize(32, 32))
        self.pushButtonRightGotoParentDirectory.setBaseSize(QSize(32, 32))
        self.pushButtonRightGotoParentDirectory.setFlat(True)

        self.horizontalLayoutRightDrivesList.addWidget(self.pushButtonRightGotoParentDirectory)

        self.pushButtonRightGotoHomeDirectory = QPushButton(self.centralwidget)
        self.pushButtonRightGotoHomeDirectory.setObjectName(u"pushButtonRightGotoHomeDirectory")
        sizePolicy1 = QSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.Fixed)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.pushButtonRightGotoHomeDirectory.sizePolicy().hasHeightForWidth())
        self.pushButtonRightGotoHomeDirectory.setSizePolicy(sizePolicy1)
        self.pushButtonRightGotoHomeDirectory.setMinimumSize(QSize(32, 32))
        self.pushButtonRightGotoHomeDirectory.setMaximumSize(QSize(32, 32))
        self.pushButtonRightGotoHomeDirectory.setBaseSize(QSize(32, 32))
        self.pushButtonRightGotoHomeDirectory.setFlat(True)

        self.horizontalLayoutRightDrivesList.addWidget(self.pushButtonRightGotoHomeDirectory)

        self.pushButtonRightRightLeftPanel = QPushButton(self.centralwidget)
        self.pushButtonRightRightLeftPanel.setObjectName(u"pushButtonRightRightLeftPanel")
        sizePolicy.setHeightForWidth(self.pushButtonRightRightLeftPanel.sizePolicy().hasHeightForWidth())
        self.pushButtonRightRightLeftPanel.setSizePolicy(sizePolicy)
        self.pushButtonRightRightLeftPanel.setMinimumSize(QSize(32, 32))
        self.pushButtonRightRightLeftPanel.setMaximumSize(QSize(32, 32))
        self.pushButtonRightRightLeftPanel.setBaseSize(QSize(32, 32))
        self.pushButtonRightRightLeftPanel.setFlat(True)

        self.horizontalLayoutRightDrivesList.addWidget(self.pushButtonRightRightLeftPanel)


        self.gridLayout.addLayout(self.horizontalLayoutRightDrivesList, 2, 1, 1, 1)

        self.splitter = QSplitter(self.centralwidget)
        self.splitter.setObjectName(u"splitter")
        self.splitter.setOrientation(Qt.Horizontal)
        self.tabWidgetLeftPanel = QTabWidget(self.splitter)
        self.tabWidgetLeftPanel.setObjectName(u"tabWidgetLeftPanel")
        self.tabWidgetLeftPanel.setMouseTracking(True)
        self.tabWidgetLeftPanel.setAcceptDrops(True)
        self.tabWidgetLeftPanel.setTabsClosable(True)
        self.tabWidgetLeftPanel.setMovable(True)
        self.tabLeft1 = QWidget()
        self.tabLeft1.setObjectName(u"tabLeft1")
        self.verticalLayout = QVBoxLayout(self.tabLeft1)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.labelLeftTabCurrentDirectoryBar1 = QLabel(self.tabLeft1)
        self.labelLeftTabCurrentDirectoryBar1.setObjectName(u"labelLeftTabCurrentDirectoryBar1")

        self.verticalLayout.addWidget(self.labelLeftTabCurrentDirectoryBar1)

        self.treeWidgetLeftFilePanel1 = QTreeWidget(self.tabLeft1)
        __qtreewidgetitem = QTreeWidgetItem()
        __qtreewidgetitem.setText(0, u"Name");
        self.treeWidgetLeftFilePanel1.setHeaderItem(__qtreewidgetitem)
        icon20 = QIcon()
        icon20.addFile(u"../pyCommander/pixmaps/dctheme/24x24/actions/go-up.png", QSize(), QIcon.Normal, QIcon.On)
        icon21 = QIcon()
        icon21.addFile(u"../pyCommander/pixmaps/dctheme/24x24/places/folder.png", QSize(), QIcon.Normal, QIcon.On)
        icon22 = QIcon()
        icon22.addFile(u"../pyCommander/pixmaps/dctheme/24x24/mimetypes/application-pdf.png", QSize(), QIcon.Normal, QIcon.On)
        __qtreewidgetitem1 = QTreeWidgetItem(self.treeWidgetLeftFilePanel1)
        __qtreewidgetitem1.setIcon(0, icon20);
        __qtreewidgetitem2 = QTreeWidgetItem(self.treeWidgetLeftFilePanel1)
        __qtreewidgetitem2.setIcon(0, icon21);
        __qtreewidgetitem3 = QTreeWidgetItem(__qtreewidgetitem2)
        __qtreewidgetitem3.setIcon(0, icon22);
        self.treeWidgetLeftFilePanel1.setObjectName(u"treeWidgetLeftFilePanel1")
        self.treeWidgetLeftFilePanel1.setMouseTracking(True)

        self.verticalLayout.addWidget(self.treeWidgetLeftFilePanel1)

        self.labelLeftFileStatusBar1 = QLabel(self.tabLeft1)
        self.labelLeftFileStatusBar1.setObjectName(u"labelLeftFileStatusBar1")

        self.verticalLayout.addWidget(self.labelLeftFileStatusBar1)

        self.tabWidgetLeftPanel.addTab(self.tabLeft1, "")
        self.tabLeft2 = QWidget()
        self.tabLeft2.setObjectName(u"tabLeft2")
        self.tabWidgetLeftPanel.addTab(self.tabLeft2, "")
        self.splitter.addWidget(self.tabWidgetLeftPanel)
        self.tabWidgetRightPanel = QTabWidget(self.splitter)
        self.tabWidgetRightPanel.setObjectName(u"tabWidgetRightPanel")
        self.tabWidgetRightPanel.setMouseTracking(True)
        self.tabWidgetRightPanel.setAcceptDrops(True)
        self.tabWidgetRightPanel.setTabsClosable(True)
        self.tabWidgetRightPanel.setMovable(True)
        self.tabRight1 = QWidget()
        self.tabRight1.setObjectName(u"tabRight1")
        self.verticalLayout_2 = QVBoxLayout(self.tabRight1)
        self.verticalLayout_2.setObjectName(u"verticalLayout_2")
        self.labelRightTabCurrentDirectoryBar1 = QLabel(self.tabRight1)
        self.labelRightTabCurrentDirectoryBar1.setObjectName(u"labelRightTabCurrentDirectoryBar1")

        self.verticalLayout_2.addWidget(self.labelRightTabCurrentDirectoryBar1)

        self.treeWidgetRightFilePanel1 = QTreeWidget(self.tabRight1)
        __qtreewidgetitem4 = QTreeWidgetItem(self.treeWidgetRightFilePanel1)
        __qtreewidgetitem4.setIcon(0, icon20);
        __qtreewidgetitem5 = QTreeWidgetItem(self.treeWidgetRightFilePanel1)
        __qtreewidgetitem5.setIcon(0, icon21);
        __qtreewidgetitem6 = QTreeWidgetItem(__qtreewidgetitem5)
        __qtreewidgetitem6.setIcon(0, icon22);
        self.treeWidgetRightFilePanel1.setObjectName(u"treeWidgetRightFilePanel1")
        self.treeWidgetRightFilePanel1.setMouseTracking(True)

        self.verticalLayout_2.addWidget(self.treeWidgetRightFilePanel1)

        self.labelRightFileStatusBar1 = QLabel(self.tabRight1)
        self.labelRightFileStatusBar1.setObjectName(u"labelRightFileStatusBar1")

        self.verticalLayout_2.addWidget(self.labelRightFileStatusBar1)

        self.tabWidgetRightPanel.addTab(self.tabRight1, "")
        self.tabRight2 = QWidget()
        self.tabRight2.setObjectName(u"tabRight2")
        self.tabWidgetRightPanel.addTab(self.tabRight2, "")
        self.splitter.addWidget(self.tabWidgetRightPanel)

        self.gridLayout.addWidget(self.splitter, 3, 0, 1, 2)

        self.verticalLayoutBottomBars = QVBoxLayout()
        self.verticalLayoutBottomBars.setObjectName(u"verticalLayoutBottomBars")
        self.horizontalLayoutCommandLine = QHBoxLayout()
        self.horizontalLayoutCommandLine.setObjectName(u"horizontalLayoutCommandLine")
        self.horizontalLayoutCommandLine.setSizeConstraint(QLayout.SetFixedSize)
        self.labelPath = QLabel(self.centralwidget)
        self.labelPath.setObjectName(u"labelPath")

        self.horizontalLayoutCommandLine.addWidget(self.labelPath)

        self.comboBoxPath = QComboBox(self.centralwidget)
        self.comboBoxPath.setObjectName(u"comboBoxPath")
        self.comboBoxPath.setEditable(True)

        self.horizontalLayoutCommandLine.addWidget(self.comboBoxPath)


        self.verticalLayoutBottomBars.addLayout(self.horizontalLayoutCommandLine)

        self.horizontalLayoutFunctionKeyButtonBar = QHBoxLayout()
        self.horizontalLayoutFunctionKeyButtonBar.setObjectName(u"horizontalLayoutFunctionKeyButtonBar")
        self.horizontalLayoutFunctionKeyButtonBar.setSizeConstraint(QLayout.SetFixedSize)
        self.pushButtonView = QPushButton(self.centralwidget)
        self.pushButtonView.setObjectName(u"pushButtonView")
        self.pushButtonView.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonView)

        self.pushButtonEdit = QPushButton(self.centralwidget)
        self.pushButtonEdit.setObjectName(u"pushButtonEdit")
        self.pushButtonEdit.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonEdit)

        self.pushButtonCopy = QPushButton(self.centralwidget)
        self.pushButtonCopy.setObjectName(u"pushButtonCopy")
        self.pushButtonCopy.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonCopy)

        self.pushButtonMove = QPushButton(self.centralwidget)
        self.pushButtonMove.setObjectName(u"pushButtonMove")
        self.pushButtonMove.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonMove)

        self.pushButtonDirectory = QPushButton(self.centralwidget)
        self.pushButtonDirectory.setObjectName(u"pushButtonDirectory")
        self.pushButtonDirectory.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonDirectory)

        self.pushButtonDelete = QPushButton(self.centralwidget)
        self.pushButtonDelete.setObjectName(u"pushButtonDelete")
        self.pushButtonDelete.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonDelete)

        self.pushButtonTerminal = QPushButton(self.centralwidget)
        self.pushButtonTerminal.setObjectName(u"pushButtonTerminal")
        self.pushButtonTerminal.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonTerminal)

        self.pushButtonExit = QPushButton(self.centralwidget)
        self.pushButtonExit.setObjectName(u"pushButtonExit")
        self.pushButtonExit.setFlat(True)

        self.horizontalLayoutFunctionKeyButtonBar.addWidget(self.pushButtonExit)


        self.verticalLayoutBottomBars.addLayout(self.horizontalLayoutFunctionKeyButtonBar)


        self.gridLayout.addLayout(self.verticalLayoutBottomBars, 4, 0, 1, 2)

        self.gridLayout.setRowStretch(0, 1)
        self.gridLayout.setRowStretch(2, 1)
        self.gridLayout.setRowStretch(3, 9)
        self.gridLayout.setRowStretch(4, 2)
        self.gridLayout.setRowMinimumHeight(0, 32)
        self.gridLayout.setRowMinimumHeight(2, 32)
        self.gridLayout.setRowMinimumHeight(4, 64)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 1396, 26))
        self.menuFiles = QMenu(self.menubar)
        self.menuFiles.setObjectName(u"menuFiles")
        self.menuMark = QMenu(self.menubar)
        self.menuMark.setObjectName(u"menuMark")
        self.menuSearch = QMenu(self.menubar)
        self.menuSearch.setObjectName(u"menuSearch")
        self.menuNetwork = QMenu(self.menubar)
        self.menuNetwork.setObjectName(u"menuNetwork")
        self.menuTabs = QMenu(self.menubar)
        self.menuTabs.setObjectName(u"menuTabs")
        self.menuTab_Options = QMenu(self.menuTabs)
        self.menuTab_Options.setObjectName(u"menuTab_Options")
        self.menuFavorities = QMenu(self.menubar)
        self.menuFavorities.setObjectName(u"menuFavorities")
        self.menuShow = QMenu(self.menubar)
        self.menuShow.setObjectName(u"menuShow")
        self.menuConfiguration = QMenu(self.menubar)
        self.menuConfiguration.setObjectName(u"menuConfiguration")
        self.menuContents = QMenu(self.menubar)
        self.menuContents.setObjectName(u"menuContents")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        MainWindow.addToolBar(Qt.TopToolBarArea, self.toolBar)
        QWidget.setTabOrder(self.pushButtonLeftVFS, self.pushButtonExit)
        QWidget.setTabOrder(self.pushButtonExit, self.pushButtonRightVFS)
        QWidget.setTabOrder(self.pushButtonRightVFS, self.comboBoxLeftDrives)
        QWidget.setTabOrder(self.comboBoxLeftDrives, self.pushButtonLeftDirectoryHotlist)
        QWidget.setTabOrder(self.pushButtonLeftDirectoryHotlist, self.pushButtonLeftDrive1)
        QWidget.setTabOrder(self.pushButtonLeftDrive1, self.pushButtonLeftGotoRootDirectory)
        QWidget.setTabOrder(self.pushButtonLeftGotoRootDirectory, self.pushButtonLeftGotoParentDirectory)
        QWidget.setTabOrder(self.pushButtonLeftGotoParentDirectory, self.pushButtonLeftGotoHomeDirectory)
        QWidget.setTabOrder(self.pushButtonLeftGotoHomeDirectory, self.pushButtonLeftRightLeftPanel)
        QWidget.setTabOrder(self.pushButtonLeftRightLeftPanel, self.comboBoxRightDrives)
        QWidget.setTabOrder(self.comboBoxRightDrives, self.pushButtonRightDirectoryHotlist)
        QWidget.setTabOrder(self.pushButtonRightDirectoryHotlist, self.pushButtonRightGotoRootDirectory)
        QWidget.setTabOrder(self.pushButtonRightGotoRootDirectory, self.pushButtonRightGotoParentDirectory)
        QWidget.setTabOrder(self.pushButtonRightGotoParentDirectory, self.pushButtonRightGotoHomeDirectory)
        QWidget.setTabOrder(self.pushButtonRightGotoHomeDirectory, self.pushButtonRightRightLeftPanel)
        QWidget.setTabOrder(self.pushButtonRightRightLeftPanel, self.tabWidgetLeftPanel)
        QWidget.setTabOrder(self.tabWidgetLeftPanel, self.tabWidgetRightPanel)
        QWidget.setTabOrder(self.tabWidgetRightPanel, self.treeWidgetLeftFilePanel1)
        QWidget.setTabOrder(self.treeWidgetLeftFilePanel1, self.treeWidgetRightFilePanel1)
        QWidget.setTabOrder(self.treeWidgetRightFilePanel1, self.pushButtonView)
        QWidget.setTabOrder(self.pushButtonView, self.pushButtonEdit)
        QWidget.setTabOrder(self.pushButtonEdit, self.pushButtonCopy)
        QWidget.setTabOrder(self.pushButtonCopy, self.pushButtonRightDrive1)
        QWidget.setTabOrder(self.pushButtonRightDrive1, self.comboBoxPath)
        QWidget.setTabOrder(self.comboBoxPath, self.pushButtonMove)
        QWidget.setTabOrder(self.pushButtonMove, self.pushButtonDirectory)
        QWidget.setTabOrder(self.pushButtonDirectory, self.pushButtonDelete)
        QWidget.setTabOrder(self.pushButtonDelete, self.pushButtonTerminal)

        self.menubar.addAction(self.menuFiles.menuAction())
        self.menubar.addAction(self.menuMark.menuAction())
        self.menubar.addAction(self.menuSearch.menuAction())
        self.menubar.addAction(self.menuNetwork.menuAction())
        self.menubar.addAction(self.menuTabs.menuAction())
        self.menubar.addAction(self.menuFavorities.menuAction())
        self.menubar.addAction(self.menuShow.menuAction())
        self.menubar.addAction(self.menuConfiguration.menuAction())
        self.menubar.addAction(self.menuContents.menuAction())
        self.menuFiles.addAction(self.actionCreateSymbolicLink)
        self.menuFiles.addAction(self.actionCreateHardLink)
        self.menuFiles.addAction(self.actionCreateDirectory)
        self.menuFiles.addAction(self.actionCreateShortcut)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.actionChangeAttributes)
        self.menuFiles.addAction(self.actionShowFileProperties)
        self.menuFiles.addAction(self.actionEditComment)
        self.menuFiles.addAction(self.actionCalculateOccupiedSpace)
        self.menuFiles.addAction(self.actionCompareByContents)
        self.menuFiles.addAction(self.actionMultiRenameTool)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.actionPackFiles)
        self.menuFiles.addAction(self.actionExtractFiles)
        self.menuFiles.addAction(self.actionTestArchive)
        self.menuFiles.addAction(self.actionSplitFile)
        self.menuFiles.addAction(self.actionCombineFiles)
        self.menuFiles.addAction(self.actionCalculateChecksum)
        self.menuFiles.addAction(self.actionVerifyChecksum)
        self.menuFiles.addSeparator()
        self.menuFiles.addAction(self.actionWipe)
        self.menuFiles.addAction(self.actionDelete)
        self.menuFiles.addAction(self.actionExit)
        self.menuMark.addAction(self.actionSelectGroup)
        self.menuMark.addAction(self.actionUnselectGroup)
        self.menuMark.addAction(self.actionSelectAll)
        self.menuMark.addAction(self.actionUnselectAll)
        self.menuMark.addAction(self.actionInvertSelection)
        self.menuMark.addAction(self.actionSelectAllWithTheSameExtension)
        self.menuMark.addAction(self.actionUnselectAllWithTheSameExtension)
        self.menuMark.addSeparator()
        self.menuMark.addAction(self.actionSaveSelection)
        self.menuMark.addAction(self.actionRestoreSelection)
        self.menuMark.addAction(self.actionSaveSelectionToFile)
        self.menuMark.addAction(self.actionLoadSelectionFromFile)
        self.menuMark.addAction(self.actionLoadSelectionFromClipboard)
        self.menuMark.addSeparator()
        self.menuMark.addAction(self.actionCopyFilenameToClipboard)
        self.menuMark.addAction(self.actionCopyFilenameWithFullPath)
        self.menuMark.addAction(self.actionCopyAllShownColumns)
        self.menuMark.addSeparator()
        self.menuMark.addAction(self.actionCompareDirectories)
        self.menuSearch.addAction(self.actionSearch)
        self.menuSearch.addAction(self.actionNewSearchInstance)
        self.menuSearch.addAction(self.actionViewCurrentSearchInstances)
        self.menuSearch.addAction(self.actionDirectoryHotlist)
        self.menuSearch.addAction(self.actionSynchronizeDirs)
        self.menuSearch.addSeparator()
        self.menuSearch.addAction(self.actionRunTerminal)
        self.menuSearch.addAction(self.actionExecuteInternalCommand)
        self.menuSearch.addSeparator()
        self.menuSearch.addAction(self.actionFlatView)
        self.menuSearch.addAction(self.actionOpenVFSList)
        self.menuSearch.addAction(self.actionSwapPanels)
        self.menuSearch.addAction(self.actionTargetSource)
        self.menuSearch.addSeparator()
        self.menuSearch.addAction(self.actionShowOccupiedSpace)
        self.menuNetwork.addAction(self.actionNetworkConnect)
        self.menuNetwork.addAction(self.actionNetworkDisconnect)
        self.menuNetwork.addSeparator()
        self.menuNetwork.addAction(self.actionMapNetworkDrive)
        self.menuNetwork.addAction(self.actionDisconnectNetworkDrive)
        self.menuNetwork.addSeparator()
        self.menuNetwork.addAction(self.actionCopyNamesWithUNCPath)
        self.menuTabs.addAction(self.actionNewTab)
        self.menuTabs.addAction(self.actionRenameTab)
        self.menuTabs.addAction(self.actionOpenFolderInNewTab)
        self.menuTabs.addSeparator()
        self.menuTabs.addAction(self.actionCloseTab)
        self.menuTabs.addAction(self.actionCloseAllTabs)
        self.menuTabs.addAction(self.actionCloseDuplicateTabs)
        self.menuTabs.addSeparator()
        self.menuTabs.addAction(self.menuTab_Options.menuAction())
        self.menuTabs.addSeparator()
        self.menuTabs.addAction(self.actionSwitchToNextTab)
        self.menuTabs.addAction(self.actionSwitchToPreviousTab)
        self.menuTabs.addSeparator()
        self.menuTabs.addAction(self.actionSaveTabsToFile)
        self.menuTabs.addAction(self.actionLoadTabsFromFile)
        self.menuTabs.addAction(self.actionSaveCurrentTabsToNewFavoriteTabs)
        self.menuTabs.addAction(self.actionLoadTabsFromFavoriteTabs)
        self.menuTabs.addSeparator()
        self.menuTabs.addAction(self.actionConfigurationOfFolderTabs)
        self.menuTabs.addAction(self.actionConfigurationOfFavoriteTabs)
        self.menuTab_Options.addAction(self.actionNormal)
        self.menuTab_Options.addAction(self.actionLocked)
        self.menuTab_Options.addAction(self.actionLockedWithDirectoryChangesAllowed)
        self.menuTab_Options.addAction(self.actionLockedWithDirectoriesOpenedInNewTabs)
        self.menuTab_Options.addSeparator()
        self.menuTab_Options.addAction(self.actionSetAllTabsToNormal)
        self.menuTab_Options.addAction(self.actionSetAllTabsToLocked)
        self.menuTab_Options.addAction(self.actionAllTabsLockedWithDirChangesAllowed)
        self.menuTab_Options.addAction(self.actionAllTabsLockedWithDirOpenedInNewTabs)
        self.menuFavorities.addAction(self.actionSaveCurrentTabsToNewFavoriteTabs2)
        self.menuFavorities.addAction(self.actionResaveOnTheLastFavoriteTabsLoaded)
        self.menuFavorities.addAction(self.actionRelopadTheLastFavoriteTabsLoaded)
        self.menuFavorities.addAction(self.actionConfigurationOfFavoriteTabs2)
        self.menuShow.addAction(self.actionBriefView)
        self.menuShow.addAction(self.actionFull)
        self.menuShow.addAction(self.actionThumbnails)
        self.menuShow.addSeparator()
        self.menuShow.addAction(self.actionQuickViewPanel)
        self.menuShow.addAction(self.actionTreeViewPanel)
        self.menuShow.addAction(self.actionSortByName)
        self.menuShow.addAction(self.actionSortByExtension)
        self.menuShow.addAction(self.actionSortBySize)
        self.menuShow.addAction(self.actionSortByDate)
        self.menuShow.addAction(self.actionSortByAttributes)
        self.menuShow.addSeparator()
        self.menuShow.addAction(self.actionReverseOrder)
        self.menuShow.addAction(self.actionRefresh)
        self.menuShow.addSeparator()
        self.menuShow.addAction(self.actionShowHiddenSystemFiles)
        self.menuShow.addSeparator()
        self.menuShow.addAction(self.actionHorizontalPanelsMode)
        self.menuShow.addSeparator()
        self.menuShow.addAction(self.actionOperationsViewer)
        self.menuConfiguration.addAction(self.actionOptions)
        self.menuConfiguration.addAction(self.actionConfigurationOfDirectoryHotlist)
        self.menuConfiguration.addAction(self.actionConfigurationOfFavoriteTabs4)
        self.menuConfiguration.addAction(self.actionConfigurationOfFileAssociations)
        self.menuConfiguration.addAction(self.actionConfigurationOfFolderTabs2)
        self.menuConfiguration.addAction(self.actionConfigurationOfArchivers)
        self.menuConfiguration.addSeparator()
        self.menuConfiguration.addAction(self.actionSavePosition)
        self.menuConfiguration.addAction(self.actionSaveSettings)
        self.menuContents.addAction(self.actionKeyboard)
        self.menuContents.addAction(self.actionVisitDoubleCommanderWebsite)
        self.menuContents.addSeparator()
        self.menuContents.addAction(self.actionAbout)
        self.toolBar.addAction(self.actionTBRefresh)
        self.toolBar.addAction(self.actionTBRunTerminal)
        self.toolBar.addAction(self.actionTBOptions)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionTBBriefView)
        self.toolBar.addAction(self.actionTBColumnsView)
        self.toolBar.addAction(self.actionTBThumbnails)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionTBFlatView)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionTBGotoPreviousEntryInHistory)
        self.toolBar.addAction(self.actionTBGotoPreviousEntryInHistory2)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionTBSelectGroup)
        self.toolBar.addAction(self.actionTBUnselectGroup)
        self.toolBar.addAction(self.actionTBInvertSelection)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionTBPackFiles)
        self.toolBar.addAction(self.actionTBExtractFiles)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionTBSearch)
        self.toolBar.addAction(self.actionTBMultiRenameTool)
        self.toolBar.addAction(self.actionTBSynchronizeDirs)
        self.toolBar.addAction(self.actionTBCopyFilenameWithFullPath)

        self.retranslateUi(MainWindow)

        self.tabWidgetLeftPanel.setCurrentIndex(0)
        self.tabWidgetRightPanel.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MainWindow", None))
        self.actionCreateSymbolicLink.setText(QCoreApplication.translate("MainWindow", u"Create Symbolic Link...", None))
        self.actionCreateHardLink.setText(QCoreApplication.translate("MainWindow", u"Create Hard Link...", None))
        self.actionCreateDirectory.setText(QCoreApplication.translate("MainWindow", u"Create Directory", None))
#if QT_CONFIG(shortcut)
        self.actionCreateDirectory.setShortcut(QCoreApplication.translate("MainWindow", u"F7", None))
#endif // QT_CONFIG(shortcut)
        self.actionCreateShortcut.setText(QCoreApplication.translate("MainWindow", u"Create Shortcut...", None))
        self.actionChangeAttributes.setText(QCoreApplication.translate("MainWindow", u"Change Attributes...", None))
        self.actionShowFileProperties.setText(QCoreApplication.translate("MainWindow", u"Show File Properties", None))
#if QT_CONFIG(shortcut)
        self.actionShowFileProperties.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Return", None))
#endif // QT_CONFIG(shortcut)
        self.actionEditComment.setText(QCoreApplication.translate("MainWindow", u"Edit Comment...", None))
        self.actionCalculateOccupiedSpace.setText(QCoreApplication.translate("MainWindow", u"Calculate Occupied Space", None))
#if QT_CONFIG(shortcut)
        self.actionCalculateOccupiedSpace.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+L", None))
#endif // QT_CONFIG(shortcut)
        self.actionCompareByContents.setText(QCoreApplication.translate("MainWindow", u"Compare by Contents", None))
        self.actionMultiRenameTool.setText(QCoreApplication.translate("MainWindow", u"Multi-Rename Tool", None))
#if QT_CONFIG(shortcut)
        self.actionMultiRenameTool.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+M", None))
#endif // QT_CONFIG(shortcut)
        self.actionPackFiles.setText(QCoreApplication.translate("MainWindow", u"Pack Files...", None))
#if QT_CONFIG(shortcut)
        self.actionPackFiles.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+F5", None))
#endif // QT_CONFIG(shortcut)
        self.actionExtractFiles.setText(QCoreApplication.translate("MainWindow", u"Extract Files...", None))
#if QT_CONFIG(shortcut)
        self.actionExtractFiles.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionTestArchive.setText(QCoreApplication.translate("MainWindow", u"Test Archive(s)", None))
#if QT_CONFIG(shortcut)
        self.actionTestArchive.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Shift+F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionSplitFile.setText(QCoreApplication.translate("MainWindow", u"Split File...", None))
        self.actionCombineFiles.setText(QCoreApplication.translate("MainWindow", u"Combine Files...", None))
        self.actionCalculateChecksum.setText(QCoreApplication.translate("MainWindow", u"Calculate Checksum...", None))
        self.actionVerifyChecksum.setText(QCoreApplication.translate("MainWindow", u"Verify Checksum...", None))
        self.actionWipe.setText(QCoreApplication.translate("MainWindow", u"Wipe", None))
#if QT_CONFIG(shortcut)
        self.actionWipe.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionDelete.setText(QCoreApplication.translate("MainWindow", u"Delete", None))
        self.actionExit.setText(QCoreApplication.translate("MainWindow", u"Exit", None))
#if QT_CONFIG(shortcut)
        self.actionExit.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionSelectGroup.setText(QCoreApplication.translate("MainWindow", u"Select  a Group...", None))
        self.actionUnselectGroup.setText(QCoreApplication.translate("MainWindow", u"Unselect a Group...", None))
        self.actionSelectAll.setText(QCoreApplication.translate("MainWindow", u"Select All", None))
        self.actionUnselectAll.setText(QCoreApplication.translate("MainWindow", u"Unselect All", None))
        self.actionInvertSelection.setText(QCoreApplication.translate("MainWindow", u"Invert Selection", None))
        self.actionSelectAllWithTheSameExtension.setText(QCoreApplication.translate("MainWindow", u"Select All with the Same Extension", None))
        self.actionUnselectAllWithTheSameExtension.setText(QCoreApplication.translate("MainWindow", u"Unselect All with the Same Extension", None))
        self.actionSaveSelection.setText(QCoreApplication.translate("MainWindow", u"Save Selection", None))
        self.actionRestoreSelection.setText(QCoreApplication.translate("MainWindow", u"Restore Selection", None))
        self.actionSaveSelectionToFile.setText(QCoreApplication.translate("MainWindow", u"Save Selection to File...", None))
        self.actionLoadSelectionFromFile.setText(QCoreApplication.translate("MainWindow", u"Load Selection from File...", None))
        self.actionLoadSelectionFromClipboard.setText(QCoreApplication.translate("MainWindow", u"Load Selection from Clipboard", None))
        self.actionCopyFilenameToClipboard.setText(QCoreApplication.translate("MainWindow", u"Copy Filename(s) to Clipboard", None))
#if QT_CONFIG(shortcut)
        self.actionCopyFilenameToClipboard.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+X", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopyFilenameWithFullPath.setText(QCoreApplication.translate("MainWindow", u"Copy Filename(s) with Full Path", None))
#if QT_CONFIG(shortcut)
        self.actionCopyFilenameWithFullPath.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+C", None))
#endif // QT_CONFIG(shortcut)
        self.actionCopyAllShownColumns.setText(QCoreApplication.translate("MainWindow", u"Copy all shown columns", None))
        self.actionCompareDirectories.setText(QCoreApplication.translate("MainWindow", u"Compare Directories", None))
        self.actionSearch.setText(QCoreApplication.translate("MainWindow", u"Search...", None))
#if QT_CONFIG(shortcut)
        self.actionSearch.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+F7", None))
#endif // QT_CONFIG(shortcut)
        self.actionNewSearchInstance.setText(QCoreApplication.translate("MainWindow", u"New search instance...", None))
#if QT_CONFIG(shortcut)
        self.actionNewSearchInstance.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F7", None))
#endif // QT_CONFIG(shortcut)
        self.actionViewCurrentSearchInstances.setText(QCoreApplication.translate("MainWindow", u"View current search instances", None))
        self.actionDirectoryHotlist.setText(QCoreApplication.translate("MainWindow", u"Directory Hotlist", None))
#if QT_CONFIG(shortcut)
        self.actionDirectoryHotlist.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionSynchronizeDirs.setText(QCoreApplication.translate("MainWindow", u"Synchronize dirs...", None))
        self.actionRunTerminal.setText(QCoreApplication.translate("MainWindow", u"Run Terminal", None))
#if QT_CONFIG(shortcut)
        self.actionRunTerminal.setShortcut(QCoreApplication.translate("MainWindow", u"F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionExecuteInternalCommand.setText(QCoreApplication.translate("MainWindow", u"Execute internal command...", None))
#if QT_CONFIG(shortcut)
        self.actionExecuteInternalCommand.setShortcut(QCoreApplication.translate("MainWindow", u"Shift+F12", None))
#endif // QT_CONFIG(shortcut)
        self.actionFlatView.setText(QCoreApplication.translate("MainWindow", u"Flat view", None))
#if QT_CONFIG(shortcut)
        self.actionFlatView.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpenVFSList.setText(QCoreApplication.translate("MainWindow", u"Open VFS List", None))
        self.actionSwapPanels.setText(QCoreApplication.translate("MainWindow", u"Swap Panels", None))
#if QT_CONFIG(shortcut)
        self.actionSwapPanels.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+U", None))
#endif // QT_CONFIG(shortcut)
        self.actionTargetSource.setText(QCoreApplication.translate("MainWindow", u"Target = Source", None))
#if QT_CONFIG(shortcut)
        self.actionTargetSource.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionShowOccupiedSpace.setText(QCoreApplication.translate("MainWindow", u"Show Occupied Space", None))
#if QT_CONFIG(shortcut)
        self.actionShowOccupiedSpace.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Shift+Return", None))
#endif // QT_CONFIG(shortcut)
        self.actionNetworkConnect.setText(QCoreApplication.translate("MainWindow", u"Network Connect...", None))
        self.actionNetworkDisconnect.setText(QCoreApplication.translate("MainWindow", u"Network Disconnect", None))
        self.actionMapNetworkDrive.setText(QCoreApplication.translate("MainWindow", u"Map Network Drive...", None))
        self.actionDisconnectNetworkDrive.setText(QCoreApplication.translate("MainWindow", u"Disconnect Network Drive...", None))
        self.actionCopyNamesWithUNCPath.setText(QCoreApplication.translate("MainWindow", u"Copy_names_with_UNC_path", None))
        self.actionNewTab.setText(QCoreApplication.translate("MainWindow", u"New Tab", None))
#if QT_CONFIG(shortcut)
        self.actionNewTab.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+T", None))
#endif // QT_CONFIG(shortcut)
        self.actionRenameTab.setText(QCoreApplication.translate("MainWindow", u"Rename Tab", None))
        self.actionOpenFolderInNewTab.setText(QCoreApplication.translate("MainWindow", u"Open Folder in a New Tab", None))
#if QT_CONFIG(shortcut)
        self.actionOpenFolderInNewTab.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Up", None))
#endif // QT_CONFIG(shortcut)
        self.actionCloseTab.setText(QCoreApplication.translate("MainWindow", u"Close Tab", None))
        self.actionCloseAllTabs.setText(QCoreApplication.translate("MainWindow", u"Close All Tabs", None))
        self.actionCloseDuplicateTabs.setText(QCoreApplication.translate("MainWindow", u"Close Duplicate Tabs", None))
        self.actionSwitchToNextTab.setText(QCoreApplication.translate("MainWindow", u"Switch to Next Tab", None))
#if QT_CONFIG(shortcut)
        self.actionSwitchToNextTab.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Tab", None))
#endif // QT_CONFIG(shortcut)
        self.actionSwitchToPreviousTab.setText(QCoreApplication.translate("MainWindow", u"Switch to Previous Tab", None))
#if QT_CONFIG(shortcut)
        self.actionSwitchToPreviousTab.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+Tab", None))
#endif // QT_CONFIG(shortcut)
        self.actionSaveTabsToFile.setText(QCoreApplication.translate("MainWindow", u"Save Tabs to File", None))
        self.actionLoadTabsFromFile.setText(QCoreApplication.translate("MainWindow", u"Load Tabs from File", None))
        self.actionSaveCurrentTabsToNewFavoriteTabs.setText(QCoreApplication.translate("MainWindow", u"Save current tabs to a New FavoriteTabs", None))
        self.actionLoadTabsFromFavoriteTabs.setText(QCoreApplication.translate("MainWindow", u"Load tabs from Favorite Tabs", None))
        self.actionConfigurationOfFolderTabs.setText(QCoreApplication.translate("MainWindow", u"Configuration of folder tabs", None))
        self.actionConfigurationOfFavoriteTabs.setText(QCoreApplication.translate("MainWindow", u"Configuration of Favorite Tabs", None))
        self.actionNormal.setText(QCoreApplication.translate("MainWindow", u"Normal", None))
        self.actionLocked.setText(QCoreApplication.translate("MainWindow", u"Locked", None))
        self.actionLockedWithDirectoryChangesAllowed.setText(QCoreApplication.translate("MainWindow", u"Locked with Directory Changes Allowed", None))
        self.actionLockedWithDirectoriesOpenedInNewTabs.setText(QCoreApplication.translate("MainWindow", u"Locked with Directories Opened in New Tabs", None))
        self.actionSetAllTabsToNormal.setText(QCoreApplication.translate("MainWindow", u"Set all tabs to Normal", None))
        self.actionSetAllTabsToLocked.setText(QCoreApplication.translate("MainWindow", u"Set all tabs to Locked", None))
        self.actionAllTabsLockedWithDirChangesAllowed.setText(QCoreApplication.translate("MainWindow", u"All tabs Locked with Dir Changes Allowed", None))
        self.actionAllTabsLockedWithDirOpenedInNewTabs.setText(QCoreApplication.translate("MainWindow", u"Alltabs Locked with Dir Opened in New Tabs", None))
        self.actionSaveCurrentTabsToNewFavoriteTabs2.setText(QCoreApplication.translate("MainWindow", u"Save current tabs to a New Favorite Tabs", None))
        self.actionResaveOnTheLastFavoriteTabsLoaded.setText(QCoreApplication.translate("MainWindow", u"Resave on the last Favorite Tabs loaded", None))
        self.actionRelopadTheLastFavoriteTabsLoaded.setText(QCoreApplication.translate("MainWindow", u"Relopad the last Favorite Tabs loaded", None))
        self.actionConfigurationOfFavoriteTabs2.setText(QCoreApplication.translate("MainWindow", u"Configuration of Favorite Tabs", None))
        self.actionBriefView.setText(QCoreApplication.translate("MainWindow", u"Brief view", None))
#if QT_CONFIG(shortcut)
        self.actionBriefView.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionFull.setText(QCoreApplication.translate("MainWindow", u"Full", None))
#if QT_CONFIG(shortcut)
        self.actionFull.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F2", None))
#endif // QT_CONFIG(shortcut)
        self.actionThumbnails.setText(QCoreApplication.translate("MainWindow", u"Thumbnails", None))
#if QT_CONFIG(shortcut)
        self.actionThumbnails.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionQuickViewPanel.setText(QCoreApplication.translate("MainWindow", u"Quick View Panel", None))
#if QT_CONFIG(shortcut)
        self.actionQuickViewPanel.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionTreeViewPanel.setText(QCoreApplication.translate("MainWindow", u"Tree View Panel", None))
#if QT_CONFIG(shortcut)
        self.actionTreeViewPanel.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F8", None))
#endif // QT_CONFIG(shortcut)
        self.actionSortByName.setText(QCoreApplication.translate("MainWindow", u"Sort by Name", None))
#if QT_CONFIG(shortcut)
        self.actionSortByName.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F3", None))
#endif // QT_CONFIG(shortcut)
        self.actionSortByExtension.setText(QCoreApplication.translate("MainWindow", u"Sort by Extension", None))
#if QT_CONFIG(shortcut)
        self.actionSortByExtension.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F4", None))
#endif // QT_CONFIG(shortcut)
        self.actionSortBySize.setText(QCoreApplication.translate("MainWindow", u"Sort by Size", None))
#if QT_CONFIG(shortcut)
        self.actionSortBySize.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F6", None))
#endif // QT_CONFIG(shortcut)
        self.actionSortByDate.setText(QCoreApplication.translate("MainWindow", u"Sort by Date", None))
#if QT_CONFIG(shortcut)
        self.actionSortByDate.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F5", None))
#endif // QT_CONFIG(shortcut)
        self.actionSortByAttributes.setText(QCoreApplication.translate("MainWindow", u"Sort by Attributes", None))
        self.actionReverseOrder.setText(QCoreApplication.translate("MainWindow", u"Reverse Order", None))
        self.actionRefresh.setText(QCoreApplication.translate("MainWindow", u"Refresh", None))
#if QT_CONFIG(shortcut)
        self.actionRefresh.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionShowHiddenSystemFiles.setText(QCoreApplication.translate("MainWindow", u"Show Hidden/System Files", None))
#if QT_CONFIG(shortcut)
        self.actionShowHiddenSystemFiles.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+.", None))
#endif // QT_CONFIG(shortcut)
        self.actionHorizontalPanelsMode.setText(QCoreApplication.translate("MainWindow", u"Horizontal Panels Mode", None))
#if QT_CONFIG(shortcut)
        self.actionHorizontalPanelsMode.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+H", None))
#endif // QT_CONFIG(shortcut)
        self.actionOperationsViewer.setText(QCoreApplication.translate("MainWindow", u"Operations Viewer", None))
#if QT_CONFIG(shortcut)
        self.actionOperationsViewer.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+V", None))
#endif // QT_CONFIG(shortcut)
        self.actionSave_current_tabs_to_a_New_Favorite_Tabs_2.setText(QCoreApplication.translate("MainWindow", u"Save current tabs to a New Favorite Tabs", None))
        self.actionResave_on_the_last_Favorite_Tabs_loaded_2.setText(QCoreApplication.translate("MainWindow", u"Resave on the last Favorite Tabs loaded", None))
        self.actionReload_the_last_Favorite_Tabs_loaded.setText(QCoreApplication.translate("MainWindow", u"Reload the last Favorite Tabs loaded", None))
        self.actionConfiguration_of_Favorite_Tabs_3.setText(QCoreApplication.translate("MainWindow", u"Configuration of Favorite Tabs", None))
        self.actionOptions.setText(QCoreApplication.translate("MainWindow", u"Options...", None))
        self.actionConfigurationOfDirectoryHotlist.setText(QCoreApplication.translate("MainWindow", u"Configuration of Directory Hotlist", None))
#if QT_CONFIG(shortcut)
        self.actionConfigurationOfDirectoryHotlist.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+D", None))
#endif // QT_CONFIG(shortcut)
        self.actionConfigurationOfFavoriteTabs4.setText(QCoreApplication.translate("MainWindow", u"Configuration of Favorite Tabs", None))
        self.actionConfigurationOfFileAssociations.setText(QCoreApplication.translate("MainWindow", u"Configuration of File Associations", None))
        self.actionConfigurationOfFolderTabs2.setText(QCoreApplication.translate("MainWindow", u"Configuration of folder tabs", None))
        self.actionConfigurationOfArchivers.setText(QCoreApplication.translate("MainWindow", u"Configuration of Archivers", None))
        self.actionSavePosition.setText(QCoreApplication.translate("MainWindow", u"Save Position", None))
        self.actionSaveSettings.setText(QCoreApplication.translate("MainWindow", u"Save Settings", None))
        self.actionKeyboard.setText(QCoreApplication.translate("MainWindow", u"Keyboard", None))
        self.actionVisitDoubleCommanderWebsite.setText(QCoreApplication.translate("MainWindow", u"Visit Double Commander Website", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
#if QT_CONFIG(shortcut)
        self.actionAbout.setShortcut(QCoreApplication.translate("MainWindow", u"F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBRefresh.setText(QCoreApplication.translate("MainWindow", u"Refresh", None))
#if QT_CONFIG(shortcut)
        self.actionTBRefresh.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+R", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBRunTerminal.setText(QCoreApplication.translate("MainWindow", u"Run Terminal", None))
#if QT_CONFIG(shortcut)
        self.actionTBRunTerminal.setShortcut(QCoreApplication.translate("MainWindow", u"F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBOptions.setText(QCoreApplication.translate("MainWindow", u"Options...", None))
        self.actionTBBriefView.setText(QCoreApplication.translate("MainWindow", u"Brief view", None))
#if QT_CONFIG(shortcut)
        self.actionTBBriefView.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBColumnsView.setText(QCoreApplication.translate("MainWindow", u"Columns View", None))
#if QT_CONFIG(tooltip)
        self.actionTBColumnsView.setToolTip(QCoreApplication.translate("MainWindow", u"Columns view", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionTBColumnsView.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+F2", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBThumbnails.setText(QCoreApplication.translate("MainWindow", u"Thumbnails", None))
#if QT_CONFIG(shortcut)
        self.actionTBThumbnails.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+F1", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBFlatView.setText(QCoreApplication.translate("MainWindow", u"Flat view", None))
#if QT_CONFIG(shortcut)
        self.actionTBFlatView.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+B", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBGotoPreviousEntryInHistory.setText(QCoreApplication.translate("MainWindow", u"Go to previous entry in history", None))
#if QT_CONFIG(tooltip)
        self.actionTBGotoPreviousEntryInHistory.setToolTip(QCoreApplication.translate("MainWindow", u"Go to previous entry in history (Alt+Left)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionTBGotoPreviousEntryInHistory.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Left", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBGotoPreviousEntryInHistory2.setText(QCoreApplication.translate("MainWindow", u"Go to next entry in history", None))
#if QT_CONFIG(tooltip)
        self.actionTBGotoPreviousEntryInHistory2.setToolTip(QCoreApplication.translate("MainWindow", u"Go to next entry in history (Alt+Right)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionTBGotoPreviousEntryInHistory2.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+Right", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBSelectGroup.setText(QCoreApplication.translate("MainWindow", u"Select  a Group...", None))
        self.actionTBUnselectGroup.setText(QCoreApplication.translate("MainWindow", u"Unselect  a Group...", None))
#if QT_CONFIG(tooltip)
        self.actionTBUnselectGroup.setToolTip(QCoreApplication.translate("MainWindow", u"Unselect  a Group", None))
#endif // QT_CONFIG(tooltip)
        self.actionTBInvertSelection.setText(QCoreApplication.translate("MainWindow", u"Unelect  a Group...", None))
#if QT_CONFIG(tooltip)
        self.actionTBInvertSelection.setToolTip(QCoreApplication.translate("MainWindow", u"Invert Selection", None))
#endif // QT_CONFIG(tooltip)
        self.actionTBPackFiles.setText(QCoreApplication.translate("MainWindow", u"Pack Files...", None))
#if QT_CONFIG(tooltip)
        self.actionTBPackFiles.setToolTip(QCoreApplication.translate("MainWindow", u"Pack Files... (Alt+F5)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionTBPackFiles.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+F5", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBExtractFiles.setText(QCoreApplication.translate("MainWindow", u"Extract Files...", None))
#if QT_CONFIG(tooltip)
        self.actionTBExtractFiles.setToolTip(QCoreApplication.translate("MainWindow", u"Extract Files (Alt+F9)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionTBExtractFiles.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+F9", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBSearch.setText(QCoreApplication.translate("MainWindow", u"Search...", None))
#if QT_CONFIG(tooltip)
        self.actionTBSearch.setToolTip(QCoreApplication.translate("MainWindow", u"Search... (Alt+F7)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionTBSearch.setShortcut(QCoreApplication.translate("MainWindow", u"Alt+F7", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBMultiRenameTool.setText(QCoreApplication.translate("MainWindow", u"Multi-Rename Tool", None))
#if QT_CONFIG(tooltip)
        self.actionTBMultiRenameTool.setToolTip(QCoreApplication.translate("MainWindow", u"Multi-Rename Tool (Ctrl+M)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionTBMultiRenameTool.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+M", None))
#endif // QT_CONFIG(shortcut)
        self.actionTBSynchronizeDirs.setText(QCoreApplication.translate("MainWindow", u"Synchronize dirs...", None))
#if QT_CONFIG(tooltip)
        self.actionTBSynchronizeDirs.setToolTip(QCoreApplication.translate("MainWindow", u"Synchronize dirs...", None))
#endif // QT_CONFIG(tooltip)
        self.actionTBCopyFilenameWithFullPath.setText(QCoreApplication.translate("MainWindow", u"Copy Filename(s) with Full Path", None))
#if QT_CONFIG(shortcut)
        self.actionTBCopyFilenameWithFullPath.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Shift+C", None))
#endif // QT_CONFIG(shortcut)
        self.pushButtonLeftDrive1.setText(QCoreApplication.translate("MainWindow", u" C", None))
        self.pushButtonLeftVFS.setText(QCoreApplication.translate("MainWindow", u" \\\\", None))
        self.pushButtonRightDrive1.setText(QCoreApplication.translate("MainWindow", u" C", None))
        self.pushButtonRightVFS.setText(QCoreApplication.translate("MainWindow", u" \\\\", None))
        self.comboBoxLeftDrives.setItemText(0, QCoreApplication.translate("MainWindow", u"C:", None))
        self.comboBoxLeftDrives.setItemText(1, QCoreApplication.translate("MainWindow", u"\\\\", None))

        self.labelLeftDiskVolumeSize.setText(QCoreApplication.translate("MainWindow", u"396Gb", None))
#if QT_CONFIG(tooltip)
        self.pushButtonLeftDirectoryHotlist.setToolTip(QCoreApplication.translate("MainWindow", u"Directory Hotlist", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonLeftDirectoryHotlist.setText(QCoreApplication.translate("MainWindow", u"*", None))
#if QT_CONFIG(tooltip)
        self.pushButtonLeftGotoRootDirectory.setToolTip(QCoreApplication.translate("MainWindow", u"Go to root directory", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonLeftGotoRootDirectory.setText(QCoreApplication.translate("MainWindow", u"\\", None))
#if QT_CONFIG(tooltip)
        self.pushButtonLeftGotoParentDirectory.setToolTip(QCoreApplication.translate("MainWindow", u"Go to parent directory", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonLeftGotoParentDirectory.setText(QCoreApplication.translate("MainWindow", u"..", None))
#if QT_CONFIG(tooltip)
        self.pushButtonLeftGotoHomeDirectory.setToolTip(QCoreApplication.translate("MainWindow", u"Go to home directory", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonLeftGotoHomeDirectory.setText(QCoreApplication.translate("MainWindow", u"~", None))
#if QT_CONFIG(tooltip)
        self.pushButtonLeftRightLeftPanel.setToolTip(QCoreApplication.translate("MainWindow", u"Show the current directory of the  right panel to the left panel", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonLeftRightLeftPanel.setText(QCoreApplication.translate("MainWindow", u"<", None))
        self.comboBoxRightDrives.setItemText(0, QCoreApplication.translate("MainWindow", u"C:", None))
        self.comboBoxRightDrives.setItemText(1, QCoreApplication.translate("MainWindow", u"\\\\", None))

        self.labelRightDiskVolumeSize.setText(QCoreApplication.translate("MainWindow", u"396Gb", None))
#if QT_CONFIG(tooltip)
        self.pushButtonRightDirectoryHotlist.setToolTip(QCoreApplication.translate("MainWindow", u"Directory Hotlist", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonRightDirectoryHotlist.setText(QCoreApplication.translate("MainWindow", u"*", None))
#if QT_CONFIG(tooltip)
        self.pushButtonRightGotoRootDirectory.setToolTip(QCoreApplication.translate("MainWindow", u"Go to root directory", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonRightGotoRootDirectory.setText(QCoreApplication.translate("MainWindow", u"\\", None))
#if QT_CONFIG(tooltip)
        self.pushButtonRightGotoParentDirectory.setToolTip(QCoreApplication.translate("MainWindow", u"Go to parent directory", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonRightGotoParentDirectory.setText(QCoreApplication.translate("MainWindow", u"..", None))
#if QT_CONFIG(tooltip)
        self.pushButtonRightGotoHomeDirectory.setToolTip(QCoreApplication.translate("MainWindow", u"Go to home directory", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonRightGotoHomeDirectory.setText(QCoreApplication.translate("MainWindow", u"~", None))
#if QT_CONFIG(tooltip)
        self.pushButtonRightRightLeftPanel.setToolTip(QCoreApplication.translate("MainWindow", u"Show the current directory of the  left panel to the right panel", None))
#endif // QT_CONFIG(tooltip)
        self.pushButtonRightRightLeftPanel.setText(QCoreApplication.translate("MainWindow", u"<", None))
        self.labelLeftTabCurrentDirectoryBar1.setText(QCoreApplication.translate("MainWindow", u"C:Users", None))
        ___qtreewidgetitem = self.treeWidgetLeftFilePanel1.headerItem()
        ___qtreewidgetitem.setText(4, QCoreApplication.translate("MainWindow", u"Attr", None));
        ___qtreewidgetitem.setText(3, QCoreApplication.translate("MainWindow", u"Date", None));
        ___qtreewidgetitem.setText(2, QCoreApplication.translate("MainWindow", u"Size", None));
        ___qtreewidgetitem.setText(1, QCoreApplication.translate("MainWindow", u"Ext", None));

        __sortingEnabled = self.treeWidgetLeftFilePanel1.isSortingEnabled()
        self.treeWidgetLeftFilePanel1.setSortingEnabled(False)
        ___qtreewidgetitem1 = self.treeWidgetLeftFilePanel1.topLevelItem(0)
        ___qtreewidgetitem1.setText(0, QCoreApplication.translate("MainWindow", u"[..]", None));
        ___qtreewidgetitem2 = self.treeWidgetLeftFilePanel1.topLevelItem(1)
        ___qtreewidgetitem2.setText(0, QCoreApplication.translate("MainWindow", u"[algorithms]", None));
        ___qtreewidgetitem3 = ___qtreewidgetitem2.child(0)
        ___qtreewidgetitem3.setText(4, QCoreApplication.translate("MainWindow", u"--a--------", None));
        ___qtreewidgetitem3.setText(3, QCoreApplication.translate("MainWindow", u"11/1/2022 21:51:04", None));
        ___qtreewidgetitem3.setText(2, QCoreApplication.translate("MainWindow", u"13.9 M", None));
        ___qtreewidgetitem3.setText(1, QCoreApplication.translate("MainWindow", u"pdf", None));
        ___qtreewidgetitem3.setText(0, QCoreApplication.translate("MainWindow", u"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b. \u0412\u0432\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0440\u0441.pdf", None));
        self.treeWidgetLeftFilePanel1.setSortingEnabled(__sortingEnabled)

        self.labelLeftFileStatusBar1.setText(QCoreApplication.translate("MainWindow", u"Selected 0 B of 13.2 MB, files: 0 of 12, folders: 0 of 5", None))
        self.tabWidgetLeftPanel.setTabText(self.tabWidgetLeftPanel.indexOf(self.tabLeft1), QCoreApplication.translate("MainWindow", u"Tab 1", None))
        self.tabWidgetLeftPanel.setTabText(self.tabWidgetLeftPanel.indexOf(self.tabLeft2), QCoreApplication.translate("MainWindow", u"Tab 2", None))
        self.labelRightTabCurrentDirectoryBar1.setText(QCoreApplication.translate("MainWindow", u"C:Users", None))
        ___qtreewidgetitem4 = self.treeWidgetRightFilePanel1.headerItem()
        ___qtreewidgetitem4.setText(4, QCoreApplication.translate("MainWindow", u"Attr", None));
        ___qtreewidgetitem4.setText(3, QCoreApplication.translate("MainWindow", u"Date", None));
        ___qtreewidgetitem4.setText(2, QCoreApplication.translate("MainWindow", u"Size", None));
        ___qtreewidgetitem4.setText(1, QCoreApplication.translate("MainWindow", u"Ext", None));
        ___qtreewidgetitem4.setText(0, QCoreApplication.translate("MainWindow", u"Name", None));

        __sortingEnabled1 = self.treeWidgetRightFilePanel1.isSortingEnabled()
        self.treeWidgetRightFilePanel1.setSortingEnabled(False)
        ___qtreewidgetitem5 = self.treeWidgetRightFilePanel1.topLevelItem(0)
        ___qtreewidgetitem5.setText(0, QCoreApplication.translate("MainWindow", u"[..]", None));
        ___qtreewidgetitem6 = self.treeWidgetRightFilePanel1.topLevelItem(1)
        ___qtreewidgetitem6.setText(0, QCoreApplication.translate("MainWindow", u"[algorithms]", None));
        ___qtreewidgetitem7 = ___qtreewidgetitem6.child(0)
        ___qtreewidgetitem7.setText(4, QCoreApplication.translate("MainWindow", u"--a----------", None));
        ___qtreewidgetitem7.setText(3, QCoreApplication.translate("MainWindow", u"11/1/22022 21:51:04", None));
        ___qtreewidgetitem7.setText(2, QCoreApplication.translate("MainWindow", u"13.9 M", None));
        ___qtreewidgetitem7.setText(1, QCoreApplication.translate("MainWindow", u"pdf", None));
        ___qtreewidgetitem7.setText(0, QCoreApplication.translate("MainWindow", u"\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c\u044b. \u0412\u0432\u043e\u0434\u043d\u044b\u0439 \u043a\u0443\u0440\u0441.pdf", None));
        self.treeWidgetRightFilePanel1.setSortingEnabled(__sortingEnabled1)

        self.labelRightFileStatusBar1.setText(QCoreApplication.translate("MainWindow", u"Selected 0 B of 13.2 MB, files: 0 of 12, folders: 0 of 5", None))
        self.tabWidgetRightPanel.setTabText(self.tabWidgetRightPanel.indexOf(self.tabRight1), QCoreApplication.translate("MainWindow", u"Tab 1", None))
        self.tabWidgetRightPanel.setTabText(self.tabWidgetRightPanel.indexOf(self.tabRight2), QCoreApplication.translate("MainWindow", u"Tab 2", None))
        self.labelPath.setText(QCoreApplication.translate("MainWindow", u"C:Users", None))
        self.pushButtonView.setText(QCoreApplication.translate("MainWindow", u"View F3", None))
        self.pushButtonEdit.setText(QCoreApplication.translate("MainWindow", u"Edit F4", None))
        self.pushButtonCopy.setText(QCoreApplication.translate("MainWindow", u"Copy F5", None))
        self.pushButtonMove.setText(QCoreApplication.translate("MainWindow", u"Move F6", None))
        self.pushButtonDirectory.setText(QCoreApplication.translate("MainWindow", u"Directory F7", None))
        self.pushButtonDelete.setText(QCoreApplication.translate("MainWindow", u"Delete F8", None))
        self.pushButtonTerminal.setText(QCoreApplication.translate("MainWindow", u"Terminal F9", None))
        self.pushButtonExit.setText(QCoreApplication.translate("MainWindow", u"Exit Alt+X", None))
        self.menuFiles.setTitle(QCoreApplication.translate("MainWindow", u"Files", None))
        self.menuMark.setTitle(QCoreApplication.translate("MainWindow", u"Mark", None))
        self.menuSearch.setTitle(QCoreApplication.translate("MainWindow", u"Commands", None))
        self.menuNetwork.setTitle(QCoreApplication.translate("MainWindow", u"Network", None))
        self.menuTabs.setTitle(QCoreApplication.translate("MainWindow", u"Tabs", None))
        self.menuTab_Options.setTitle(QCoreApplication.translate("MainWindow", u"Tab Options", None))
        self.menuFavorities.setTitle(QCoreApplication.translate("MainWindow", u"Favorities", None))
        self.menuShow.setTitle(QCoreApplication.translate("MainWindow", u"Show", None))
        self.menuConfiguration.setTitle(QCoreApplication.translate("MainWindow", u"Configuration", None))
        self.menuContents.setTitle(QCoreApplication.translate("MainWindow", u"Contents", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
    # retranslateUi

